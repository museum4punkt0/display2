import { Line3, Plane, Sphere, Vector3 } from 'three';
import { Logger } from '../../simpleLog';
const log = new Logger('math');

// precision used to detect singularities
const EPSILON = Number.EPSILON * 1000;

/**
 * From the subspace generated by vectors normal to v pick one.
 * We pick the one closest to the +y axis. That is the projection of 0, 1, 0
 * onto this space. If v is parallel to +y then pick 1, 0, 0
 */
function pickAxesSubspaceMember(v: Vector3) {
  // all vectors in this subspace are valid axes
  const axesSubspace = new Plane(v.clone().normalize());
  // pick the one closest to +y by projecting 010 on the plane
  // we want to maximize +y so we get as horizontal as possible motions
  const chosenAxis = new Vector3();
  axesSubspace.projectPoint(new Vector3(0, 1, 0), chosenAxis);
  // However this projection is singular when the normal is aligned with +y
  // Then we just pick +x as the axis
  if (chosenAxis.lengthSq() < EPSILON) {
    return new Vector3(1, 0, 0);
  }
  return chosenAxis.normalize();
}

/**
 * The axis of rotation from src to dest. And the rotation angle.
 */
function computeAxisAngle(src: Vector3, dest: Vector3) {
  const angle = src.angleTo(dest);
  let axis;

  if (Math.abs(Math.PI - angle) < EPSILON) {
    log.info('opposite directions, choosing one axis');
    axis = pickAxesSubspaceMember(src);
  } else {
    axis = src.clone().cross(dest).normalize();
  }
  return { axis, angle };
}

function segmentOutsideSphere(sphere: Sphere, src: Vector3, dest: Vector3) {
  const r2 = sphere.radius * sphere.radius;
  // if either end is in the sphere then the segment is not outside it
  if (
    src.distanceToSquared(sphere.center) <= r2 ||
    dest.distanceToSquared(sphere.center) <= r2
  ) {
    return false;
  }
  // deal with the degenerate case where src == dest and we have no real segment
  if (src.distanceToSquared(dest) < EPSILON) {
    return true; // as the src==dest point failed the above test already
  }
  const line = new Line3(src, dest);
  const t = line.closestPointToPointParameter(sphere.center, false);
  const p = new Vector3();
  line.at(t, p);
  // line does not intersect the sphere if the distance to the closest point > radius
  if (p.distanceToSquared(sphere.center) > r2) {
    return true;
  }
  // line intersects sphere.
  // if the closest point is between src and dest then segment intersects the sphere
  return t < 0 || t > 1;
}

export { computeAxisAngle, segmentOutsideSphere };
// for testing only
export { pickAxesSubspaceMember };
